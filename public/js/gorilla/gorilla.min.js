class GorillaEditor {
  constructor(container, options = {}) {
    this.container = document.getElementById(container);
    this.options = options;
    this.fontFamilyOptions = ["Roboto", "Arial", "Poppins", "Poiret one"];
    this.fontSizeOptions = [
      "8",
      "9",
      "10",
      "11",
      "12",
      "14",
      "16",
      "18",
      "20",
      "24",
      "36",
      "48",
      "60",
      "72",
    ];
    this.colorPickerOptions = [
      "#414141",
      "#4b0082",
      "#4d4dff",
      "#008000",
      "#b37400",
      "#ff4d4d",
      // other shades
      "#676767",
      "#8a2be2",
      "#9a9aff",
      "#00cd00",
      "#ffa500",
      "#ff9a9a",
      // other shades
      "#8d8d8d",
      "#af6eeb",
      "#b4b4ff",
      "#68ff68",
      "#ffc04d",
      "#ffb4b4",
      // other shades
      "#b3b3b3",
      "#d4b1f4",
      "#ceceff",
      "#b5ffb5",
      "#ffdb9a",
      "#ffcdcd",
      // other shades
      // "#d9d9d9",
      // "#f9f4fd",
      // "#e7e7ff",
      // "#cfffcf",
      // "#ffedcd",
      // "#ffe7e7",
      
    ];
    this.init();
  }

  init() {
    // Initialize the editor, textarea, and toolbar
    this.initEditor();
    this.initToolbar();

    // Append the editor to the body or a specific container
    this.container.appendChild(this.toolbar);
    this.container.appendChild(this.editor);

    this.editor.focus();
    // disable context menu in editor
    this.container.oncontextmenu = (e) => {
      e.preventDefault();
      return false;
    };
  }

  initToolbar() {
    this.toolbar = document.createElement("div");
    this.toolbar.className = "go-toolbar";

    // Create toolbar buttons
    const buttons = [
      { type: "btn", command: "undo", icon: "undo-2" },
      { type: "btn", command: "redo", icon: "redo-2" },
      // {
      //   type: "dropdown",
      //   title: "heading",
      //   options: ["Normal text", "H1", "H2", "H3", "H4", "H5", "H6"],
      // },
      // {
      //   type: "vr",
      // },
      {
        type: "dropdown",
        title: "fontFamily",
      },
      {
        type: "vr",
      },
      {
        type: "dropdown",
        title: "fontSize",
        default: "14",
      },
      {
        type: "vr",
      },
      { type: "switch", command: "bold", icon: "bold" },
      { type: "switch", command: "italic", icon: "italic" },
      { type: "switch", command: "underline", icon: "underline" },
      { type: "dropdown", title: "textColor", icon: "baseline" },
      { type: "dropdown", title: "highlightColor", icon: "brush" },
      // {
      //   type: "vr",
      // },
      // { type: "btn", command: "createLink", icon: "link-2" },
      // { type: "btn", command: "insertImage", icon: "image" },
      {
        type: "vr",
      },
      {
        type: "dropdown",
        title: "alignment",
        options: ["align-left", "align-center", "align-right", "align-justify"],
      },
      { type: "switch", command: "insertUnorderedList", icon: "list" },
      { type: "switch", command: "insertOrderedList", icon: "list-ordered" },
      {
        type: "vr",
      },
      // { type: "btn", command: "createLink", icon: "link-2" },
      { type: "btn", command: "insertHorizontalRule", icon: "minus" },
      { type: "switch", command: "contentReadOnly", icon: "eye" },
    ];

    buttons.forEach((button) => {
      if (button.type == "btn") {
        const btn = document.createElement("button");
        btn.className = "go-toolbar-button";
        btn.innerHTML = `<i class="go-toolbar-icon" data-lucide="${button.icon}"></i>`;
        btn.onclick = () => document.execCommand(button.command, false, null);
        this.toolbar.appendChild(btn);
      } else if (button.type == "dropdown") {
        if (button.title == "fontFamily") {
          const dropdown = document.createElement("select");
          dropdown.className = "go-toolbar-dropdown go-fontFamily-dropdown";
          this.fontFamilyOptions.forEach((option) => {
            const opt = document.createElement("option");
            opt.value = option;
            opt.textContent = option;
            if (option === "Roboto") {
              opt.selected = true; // Set default value
            }
            dropdown.appendChild(opt);
          });
          dropdown.onchange = () => {
            document.execCommand(
              "fontName",
              false,
              dropdown.value.replace(/['"]+/g, "")
            );
          };
          this.toolbar.appendChild(dropdown);
        }
        if (button.title == "alignment") {
          const dropdown = document.createElement("div");
          dropdown.className = "dropdown";

          const overlay = document.createElement("div");
          overlay.className = "overlay";
          overlay.onclick = () => {
            overlay.classList.toggle("show");
            dropdownContent.classList.toggle("show");
            dropdownButton.classList.toggle("active");
          };

          dropdown.appendChild(overlay);

          const dropdownButton = document.createElement("button");
          dropdownButton.className = `go-toolbar-dropdown-button ${button.title}`;

          dropdownButton.innerHTML = `<i class="go-toolbar-icon" data-lucide="align-left"></i>`;
          dropdownButton.onclick = () => {
            overlay.classList.toggle("show");
            dropdownContent.classList.toggle("show");
            dropdownButton.classList.toggle("active");
          };
          dropdown.appendChild(dropdownButton);
          // Create dropdown content
          const dropdownContent = document.createElement("div");
          dropdownContent.className = "dropdown-content";
          button.options.forEach((option) => {
            const opt = document.createElement("button");
            opt.className = "go-toolbar-button";
            if (option === "align-left") {
              opt.classList.add("active"); // Set default active button
            }
            opt.innerHTML = `<i class="go-toolbar-icon" data-lucide="${option}"></i>`;
            opt.onclick = () => {
              overlay.classList.toggle("show");
              dropdownContent.classList.remove("show");
              dropdownButton.classList.remove("active");

              // Remove active class from all options
              const activeOptions = dropdownContent.querySelectorAll(
                ".go-toolbar-button.active"
              );
              activeOptions.forEach((activeOpt) => {
                activeOpt.classList.remove("active");
              });
              // Add active class to the clicked option
              opt.classList.add("active");

              // Update the icon in the dropdown button
              dropdownButton.innerHTML = `<i class="go-toolbar-icon" data-lucide="${option}"></i>`;
              loadIcons();

              // Execute the command for alignment
              document.execCommand(
                "justify" + option.replace("align-", ""),
                false,
                null
              );
            };

            dropdownContent.appendChild(opt);
          });
          dropdown.appendChild(dropdownContent);

          //   dropdown.className = "go-toolbar-dropdown";
          //   button.options.forEach((option) => {
          //     const opt = document.createElement("option");
          //     opt.value = option;
          //     opt.textContent = option.replace("align-", "");
          //     if (option === "align-left") {
          //       opt.selected = true; // Set default value
          //     }
          //     dropdown.appendChild(opt);
          //   });
          //   dropdown.onchange = () => {
          //     document.execCommand("justify" + dropdown.value.replace("align-", ""), false, null);
          //   };
          this.toolbar.appendChild(dropdown);
        }
        // if (button.title == "heading") {
        //   const dropdown = document.createElement("select");
        //   dropdown.className = "go-toolbar-dropdown go-heading-dropdown";
        //   button.options.forEach((option) => {
        //     const opt = document.createElement("option");
        //     // opt.value = option.toLowerCase().replace(/\s/g, "-");
        //     opt.textContent = option;
        //     if (option === "Normal text") {
        //       opt.selected = true; // Set default value
        //     }
        //     dropdown.appendChild(opt);
        //   });
        //   dropdown.onchange = () => {
        //     // console.log("Selected heading:", dropdown.value);
        //     if (dropdown.value === "Normal text") {
        //       document.execCommand("formatBlock", false, "p");
        //     } else {
        //       document.execCommand("formatBlock", false, dropdown.value);
        //     }
        //     this.updateToolbarState();
        //   };
        //   this.toolbar.appendChild(dropdown);
        // }
        if (button.title == "fontSize") {
          const dropdown = document.createElement("select");
          dropdown.className = "go-toolbar-dropdown go-fontSize-dropdown";
          this.fontSizeOptions.forEach((option) => {
            const opt = document.createElement("option");
            opt.value = option;
            opt.textContent = option;
            if (option == button.default) {
              opt.selected = true; // Set default value
            }
            dropdown.appendChild(opt);
          });
          dropdown.onchange = () => {
            var selection = window.getSelection();
            const range =
              selection.rangeCount > 0 ? selection.getRangeAt(0) : null;

            if (range && range.startContainer) {
              const parentElement = range.startContainer.parentElement;
              if (!parentElement.classList.contains("go-editor")) {
                parentElement.style.fontSize = dropdown.value + "px";
              }
            }
          };
          this.toolbar.appendChild(dropdown);
        }
        if (button.title == "textColor") {
          const colorPicker = document.createElement("div");
          colorPicker.className = "dropdown";

          const overlay = document.createElement("div");
          overlay.className = "overlay";
          overlay.onclick = () => {
            overlay.classList.toggle("show");
            colorPickerContent.classList.toggle("show");
            colorPickerButton.classList.toggle("active");
          };
          colorPicker.appendChild(overlay);

          const colorPickerButton = document.createElement("button");
          colorPickerButton.className = `go-toolbar-dropdown-button ${button.title}`;

          colorPickerButton.innerHTML = `<i class="go-toolbar-icon" data-lucide="${button.icon}"></i>`;
          colorPickerButton.onclick = () => {
            overlay.classList.toggle("show");
            colorPickerContent.classList.toggle("show");
            colorPickerButton.classList.toggle("active");
          };
          colorPicker.appendChild(colorPickerButton);
          // Create dropdown content
          const colorPickerContent = document.createElement("div");
          colorPickerContent.className = "colorPicker-content";

          this.colorPickerOptions.forEach((color) => {
            const colorBlock = document.createElement("button");
            colorBlock.className = "color-block";
            colorBlock.style.backgroundColor = color;
            colorBlock.onclick = () => {
              overlay.classList.toggle("show");
              colorPickerContent.classList.toggle("show");
              colorPickerButton.classList.toggle("active");

              // var selection = window.getSelection();
              // const range =
              //   selection.rangeCount > 0 ? selection.getRangeAt(0) : null;

              // if (range && range.startContainer) {
              //   console.log(range.focusedNode);
              //   const parentElement = range.startContainer.parentElement;
              //   if (!parentElement.classList.contains("go-editor")) {
              //     parentElement.style.color = colorBlock.style.backgroundColor;
              //   }
              // }
              document.execCommand(
                "foreColor",
                false,
                colorBlock.style.backgroundColor
              );

              colorPickerButton.style.color = colorBlock.style.backgroundColor;
              // console.log(colorBlock.style.backgroundColor);
            };

            colorPickerContent.appendChild(colorBlock);
          });

          colorPicker.appendChild(colorPickerContent);
          this.toolbar.appendChild(colorPicker);
        }
        if (button.title == "highlightColor") {
          const colorPicker = document.createElement("div");
          colorPicker.className = "dropdown";

          const overlay = document.createElement("div");
          overlay.className = "overlay";
          overlay.onclick = () => {
            overlay.classList.toggle("show");
            colorPickerContent.classList.toggle("show");
            colorPickerButton.classList.toggle("active");
          };
          colorPicker.appendChild(overlay);

          const colorPickerButton = document.createElement("button");
          colorPickerButton.className = `go-toolbar-dropdown-button ${button.title}`;

          colorPickerButton.innerHTML = `<i class="go-toolbar-icon" data-lucide="${button.icon}"></i>`;
          colorPickerButton.onclick = () => {
            overlay.classList.toggle("show");
            colorPickerContent.classList.toggle("show");
            colorPickerButton.classList.toggle("active");
          };
          colorPicker.appendChild(colorPickerButton);
          // Create dropdown content
          const colorPickerContent = document.createElement("div");
          colorPickerContent.className = "colorPicker-content";

          const clearBtn = document.createElement("button");
          clearBtn.className = "go-toolbar-button";
          clearBtn.style.display = "block";
          clearBtn.style.marginBottom = "7px";
          clearBtn.innerHTML = `<i class="go-toolbar-icon" data-lucide="trash"></i>`;
          clearBtn.onclick = () => {
            overlay.classList.toggle("show");
            colorPickerContent.classList.toggle("show");
            colorPickerButton.classList.toggle("active");
            var selection = window.getSelection();
            const range =
              selection.rangeCount > 0 ? selection.getRangeAt(0) : null;

            if (range && range.startContainer) {
              const parentElement = range.startContainer.parentElement;
              if (!parentElement.classList.contains("go-editor")) {
                parentElement.style.backgroundColor = "";
              }
            }
          };

          colorPickerContent.appendChild(clearBtn);
          this.colorPickerOptions.forEach((color) => {
            const colorBlock = document.createElement("button");
            colorBlock.className = "color-block";
            colorBlock.style.backgroundColor = color;
            colorBlock.onclick = () => {
              overlay.classList.toggle("show");
              colorPickerContent.classList.toggle("show");
              colorPickerButton.classList.toggle("active");

              document.execCommand(
                "HiliteColor",
                false,
                colorBlock.style.backgroundColor
              );
              colorPickerButton.style.color = colorBlock.style.backgroundColor;
            };

            colorPickerContent.appendChild(colorBlock);
          });

          colorPicker.appendChild(colorPickerContent);

          this.toolbar.appendChild(colorPicker);
        }
      } else if (button.type == "vr") {
        const vr = document.createElement("span");
        vr.className = "go-toolbar-vr";
        this.toolbar.appendChild(vr);
      } else if (button.type == "switch") {
        const btn = document.createElement("button");
        btn.className = `go-toolbar-button ${button.command}`;
        btn.innerHTML = `<i class="go-toolbar-icon" data-lucide="${button.icon}"></i>`;
        btn.onclick = () => {
          // if (["bold", "italic", "underline"].includes(button.command)) {
          //   var selection = window.getSelection();
          //   const range =
          //     selection.rangeCount > 0 ? selection.getRangeAt(0) : null;

          //   if (range && range.startContainer) {
          //     const parentElement = range.startContainer.parentElement;
          //     if (!parentElement.classList.contains("go-editor")) {
          //       if (button.command == "bold") {
          //         parentElement.classList.toggle("bold");
          //       } else if (button.command == "italic") {
          //         parentElement.classList.toggle("italic");
          //       } else if (button.command == "underline") {
          //         parentElement.classList.toggle("underline");
          //       }
          //     }
          //   }
          // } else {
          //   document.execCommand(button.command, false, null);
          // }
          if (button.icon == "eye") {
            if (btn.classList.contains("active-view-only")) {
              console.log("editing set on");
              this.editor.contentEditable = true;
              this.toolbar.childNodes.forEach((item) => {
                if (!item.classList.contains("contentReadOnly")) {
                  item.disabled = false;
                  if (item.classList.contains("dropdown")) {
                    const dropdown = item.querySelector(
                      ".go-toolbar-dropdown-button"
                    );
                    if (dropdown) {
                      dropdown.disabled = false;
                    }
                  }
                }
              });
            } else {
              console.log("editing set off");
              this.editor.contentEditable = false;
              this.toolbar.childNodes.forEach((item) => {
                if (!item.classList.contains("contentReadOnly")) {
                  item.disabled = true;
                  if (item.classList.contains("dropdown")) {
                    const dropdown = item.querySelector(
                      ".go-toolbar-dropdown-button"
                    );
                    if (dropdown) {
                      dropdown.disabled = true;
                    }
                  }
                }
              });
            }
            btn.classList.toggle("active-view-only");
          } else {
            document.execCommand(button.command, false, null);
            btn.classList.toggle("active");
          }
        };
        this.toolbar.appendChild(btn);
      }
    });
  }

  initEditor() {
    this.editor = document.createElement("div");
    this.editor.contentEditable = true;
    this.editor.className = "go-editor Roboto";
    this.editor.spellcheck = true;
    this.editor.innerHTML = "<p><br></p>";
    this.editor.style.overflowY = "scroll";
    if (this.options.height) {
      this.editor.style.height = this.options.height + "px";
    } else {
      this.editor.style.height = "85vh";
    }

    document.execCommand("defaultParagraphSeparator", false, "p");
    document.execCommand("useCSS", false, true);
    document.execCommand("styleWithCSS", false, true);

    // Add event listeners for the editor
    this.editor.addEventListener("input", () => {
      // Handle input events, e.g., save content or update state
      // console.log("Content changed:", this.editor.innerHTML);
      if (this.editor.innerHTML.length == 0) {
        this.editor.innerHTML = "<p><br></p>";
      }
    });

    this.editor.addEventListener("keyup", (event) => {
      // Update toolbar state based on the current selection
      this.updateToolbarState();
    });

    this.editor.addEventListener("keydown", (event) => {
      // Handle keydown events, e.g., shortcuts
      if (event.ctrlKey && event.key === "b") {
        document.execCommand("bold");
        event.preventDefault();
      }
    });

    this.editor.onclick = () => {
      // console.log("focused");
      this.updateToolbarState();
    };
  }

  updateToolbarState() {
    // Update the toolbar state based on the current selection
    const selection = window.getSelection();
    const range = selection.rangeCount > 0 ? selection.getRangeAt(0) : null;

    if (range && range.startContainer) {
      const parentElement = range.startContainer.parentElement;
      // console.log(parentElement);

      // Update active states for buttons
      const boldButton = this.toolbar.querySelector(".go-toolbar-button.bold");
      boldButton.classList.toggle("active", document.queryCommandState("bold"));

      const italicButton = this.toolbar.querySelector(
        ".go-toolbar-button.italic"
      );
      italicButton.classList.toggle(
        "active",
        document.queryCommandState("italic")
      );

      const underlineButton = this.toolbar.querySelector(
        ".go-toolbar-button.underline"
      );
      underlineButton.classList.toggle(
        "active",
        document.queryCommandState("underline")
      );

      const ulButton = this.toolbar.querySelector(
        ".go-toolbar-button.insertUnorderedList"
      );
      ulButton.classList.toggle(
        "active",
        document.queryCommandState("insertUnorderedList")
      );

      const olButton = this.toolbar.querySelector(
        ".go-toolbar-button.insertOrderedList"
      );
      olButton.classList.toggle(
        "active",
        document.queryCommandState("insertOrderedList")
      );

      //Update alignment btn
      const alignmentDropDown = this.toolbar.querySelector(
        ".go-toolbar-dropdown-button.alignment"
      );
      if (alignmentDropDown) {
        if (document.queryCommandState("justifyLeft")) {
          alignmentDropDown.innerHTML = `<i class="go-toolbar-icon" data-lucide="align-left"></i>`;
        } else if (document.queryCommandState("justifyCenter")) {
          alignmentDropDown.innerHTML = `<i class="go-toolbar-icon" data-lucide="align-center"></i>`;
        } else if (document.queryCommandState("justifyRight")) {
          alignmentDropDown.innerHTML = `<i class="go-toolbar-icon" data-lucide="align-right"></i>`;
        } else {
          alignmentDropDown.innerHTML = `<i class="go-toolbar-icon" data-lucide="align-justify"></i>`;
        }
        loadIcons();
      }

      //Update font size counter
      const fontSizeDropDown = this.toolbar.querySelector(
        ".go-toolbar-dropdown.go-fontSize-dropdown"
      );
      if (fontSizeDropDown) {
        // console.log(parentElement);
        if (!parentElement.classList.contains("go-editor")) {
          fontSizeDropDown.value =
            parseInt(parentElement.style.fontSize, 10) || 14;
        }
      }

      //Update heading type
      const headingDropdown = this.toolbar.querySelector(
        ".go-toolbar-dropdown.go-heading-dropdown"
      );
      if (headingDropdown) {
        // console.log(document.queryCommandValue("formatBlock"));
        switch (document.queryCommandValue("formatBlock")) {
          case "":
            headingDropdown.value = "Normal text";
            break;
          case "p":
            headingDropdown.value = "Normal text";
            break;
          case "h1":
            headingDropdown.value = "H1";
            break;
          case "h2":
            headingDropdown.value = "H2";
            break;
          case "h3":
            headingDropdown.value = "H3";
            break;
          case "h4":
            headingDropdown.value = "H4";
            break;
          case "h5":
            headingDropdown.value = "H5";
            break;
          case "h6":
            headingDropdown.value = "H6";
            break;
        }
      }

      // Update font family dropdown
      const fontFamilyDropdown = this.toolbar.querySelector(
        ".go-toolbar-dropdown.go-fontFamily-dropdown"
      );
      if (fontFamilyDropdown) {
        // console.log(parentElement);
        if (!parentElement.classList.contains("go-editor")) {
          fontFamilyDropdown.value =
            parentElement.style.fontFamily.replace(/['"]+/g, "") || "Roboto";
        }
      }

      //Update fontColor
      const fontColorBtn = this.toolbar.querySelector(
        ".go-toolbar-dropdown-button.textColor"
      );

      if (fontColorBtn) {
        // console.log(parentElement);
        if (!parentElement.classList.contains("go-editor")) {
          fontColorBtn.style.color = parentElement.style.color || "#414141";
        }
      }

      //Update highlightColor
      const highlightColorBtn = this.toolbar.querySelector(
        ".go-toolbar-dropdown-button.highlightColor"
      );

      if (highlightColorBtn) {
        // console.log(parentElement);
        if (!parentElement.classList.contains("go-editor")) {
          highlightColorBtn.style.color =
            parentElement.style.backgroundColor || "#414141";
        }
      }
    }
  }
}

// //Lucide icon loading dependency

// function loadIcons() {
//   lucide.createIcons();
//   // console.log("icons loaded");
// }

// var script = document.createElement("script"); // create a script DOM node
// script.src = "https://unpkg.com/lucide@latest"; // set its src to the provided URL
// script.onreadystatechange = loadIcons;
// script.onload = loadIcons;
// document.head.appendChild(script);

// loadIcons();
